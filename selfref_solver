#!/usr/bin/env python

from __future__ import print_function
import z3

def question(i):
  v = z3.Int("q%d" % i)
  solver.add(v >= 1)
  solver.add(v <= 5)
  return v

def question_answer(i,a):
  v = z3.Int("a%d,%s" % (i," ABCDE"[a]))
  solver.add(v >= 0)
  solver.add(v <= 1)
  solver.add((v == 1) == (q[i] == a))
  return v

solver = z3.Solver()

q  = {i: question(i) for i in range(1,21)}
qa = {(i,a): question_answer(i,a) for i in range(1,21) for a in range(1,6)}

a_answers = z3.Sum([qa[i,1] for i in range(1,21)])
b_answers = z3.Sum([qa[i,2] for i in range(1,21)])
c_answers = z3.Sum([qa[i,3] for i in range(1,21)])
d_answers = z3.Sum([qa[i,4] for i in range(1,21)])
e_answers = z3.Sum([qa[i,5] for i in range(1,21)])


# Question 1
solver.add((q[1] == 1) == (q[1] == 2))
solver.add((q[1] == 2) == z3.And(q[1] != 2, q[2] == 2))
solver.add((q[1] == 3) == z3.And(q[1] != 2, q[2] != 2, q[3] == 2))
solver.add((q[1] == 4) == z3.And(q[1] != 2, q[2] != 2, q[3] != 2, q[4] == 2))
solver.add((q[1] == 5) == z3.And(q[1] != 2, q[2] != 2, q[3] != 2, q[4] != 2, q[5] == 2))

# Question 2
solver.add(q[ 1] != q[ 2])
solver.add(q[ 2] != q[ 3])
solver.add(q[ 3] != q[ 4])
solver.add(q[ 4] != q[ 5])
solver.add(q[ 5] != q[ 6])
solver.add((q[ 6] == q[ 7]) == (q[2] == 1))
solver.add((q[ 7] == q[ 8]) == (q[2] == 2))
solver.add((q[ 8] == q[ 9]) == (q[2] == 3))
solver.add((q[ 9] == q[10]) == (q[2] == 4))
solver.add((q[10] == q[11]) == (q[2] == 5))
solver.add(q[11] != q[12])
solver.add(q[12] != q[13])
solver.add(q[13] != q[14])
solver.add(q[14] != q[15])
solver.add(q[15] != q[16])
solver.add(q[16] != q[17])
solver.add(q[17] != q[18])
solver.add(q[18] != q[19])
solver.add(q[19] != q[20])

# Question 3
solver.add((e_answers == 0) == (q[3] == 1))
solver.add((e_answers == 1) == (q[3] == 2))
solver.add((e_answers == 2) == (q[3] == 3))
solver.add((e_answers == 3) == (q[3] == 4))
solver.add((e_answers == 4) == (q[3] == 5))

# Question 4
solver.add((a_answers == 4) == (q[4] == 1))
solver.add((a_answers == 5) == (q[4] == 2))
solver.add((a_answers == 6) == (q[4] == 3))
solver.add((a_answers == 7) == (q[4] == 4))
solver.add((a_answers == 8) == (q[4] == 5))

# Question 5
solver.add(z3.Implies(q[5] == 1, q[5] == q[1]))
solver.add(z3.Implies(q[5] == 2, q[5] == q[2]))
solver.add(z3.Implies(q[5] == 3, q[5] == q[3]))
solver.add(z3.Implies(q[5] == 4, q[5] == q[4]))
solver.add(z3.Implies(q[5] == 5, q[5] == q[5]))

# Question 6
solver.add((q[17] == 3) == (q[6] == 1))
solver.add((q[17] == 4) == (q[6] == 2))
solver.add((q[17] == 5) == (q[6] == 3))
solver.add(z3.Or(q[17] == 1, q[17] == 2) == (q[6] == 4))
solver.add(q[6] != 5)

# Question 7
solver.add(z3.Or(q[7] - q[8] == 4, q[8] - q[7] == 4) == (q[7] == 1))
solver.add(z3.Or(q[7] - q[8] == 3, q[8] - q[7] == 3)== (q[7] == 2))
solver.add(z3.Or(q[7] - q[8] == 2, q[8] - q[7] == 2)== (q[7] == 3))
solver.add(z3.Or(q[7] - q[8] == 1, q[8] - q[7] == 1)== (q[7] == 4))
solver.add(z3.Or(q[7] - q[8] == 0, q[8] - q[7] == 0)== (q[7] == 5))

# Question 8
solver.add((a_answers + e_answers == 4) == (q[8] == 1))
solver.add((a_answers + e_answers == 5) == (q[8] == 2))
solver.add((a_answers + e_answers == 6) == (q[8] == 3))
solver.add((a_answers + e_answers == 7) == (q[8] == 4))
solver.add((a_answers + e_answers == 8) == (q[8] == 5))

# Question 9
solver.add((q[10] == q[9]) == (q[9] == 1))
solver.add(z3.And(q[10] != q[9], q[11] == q[9]) == (q[9] == 2))
solver.add(z3.And(q[10] != q[9], q[11] != q[9], q[12] == q[9]) == (q[9] == 3))
solver.add(z3.And(q[10] != q[9], q[11] != q[9], q[12] != q[9], q[13] == q[9]) == (q[9] == 4))
solver.add(z3.And(q[10] != q[9], q[11] != q[9], q[12] != q[9], q[13] != q[9], q[14] == q[9]) == (q[9] == 5))

# Question 10
solver.add((q[16] == 4) == (q[10] == 1))
solver.add((q[16] == 1) == (q[10] == 2))
solver.add((q[16] == 5) == (q[10] == 3))
solver.add((q[16] == 2) == (q[10] == 4))
solver.add((q[16] == 3) == (q[10] == 5))

# Question 11
prec_b_answers = z3.Sum([qa[i,2] for i in range(1,11)])
solver.add((prec_b_answers == 0) == (q[11] == 1))
solver.add((prec_b_answers == 1) == (q[11] == 2))
solver.add((prec_b_answers == 2) == (q[11] == 3))
solver.add((prec_b_answers == 3) == (q[11] == 4))
solver.add((prec_b_answers == 4) == (q[11] == 5))

# Question 12
def cons_in(*ary):
  return z3.Or([cons_answers == i for i in ary])
cons_answers = b_answers + c_answers + d_answers
solver.add(z3.Implies(q[12] == 1, cons_in(2,4,6,8,10,12,14,16,18,20)))
solver.add(z3.Implies(q[12] == 2, cons_in(1,3,5,7,9,11,13,15,17,19)))
solver.add(z3.Implies(q[12] == 3, cons_in(1,4,9,16)))
solver.add(z3.Implies(q[12] == 4, cons_in(2,3,5,7,11,13,17,19)))
solver.add(z3.Implies(q[12] == 5, cons_in(5,10,15,20)))

# Question 13
solver.add(q[1] != 1)
solver.add(q[3] != 1)
solver.add(q[5] != 1)
solver.add(q[7] != 1)
solver.add((q[ 9] == 1) == (q[13] == 1))
solver.add((q[11] == 1) == (q[13] == 2))
solver.add((q[13] == 1) == (q[13] == 3))
solver.add((q[15] == 1) == (q[13] == 4))
solver.add((q[17] == 1) == (q[13] == 5))
solver.add(q[19] != 1)

# Question 14
solver.add((d_answers == 6) == (q[4] == 1))
solver.add((d_answers == 7) == (q[4] == 2))
solver.add((d_answers == 8) == (q[4] == 3))
solver.add((d_answers == 9) == (q[4] == 4))
solver.add((d_answers == 10) == (q[4] == 5))

# Question 15
solver.add(q[15] == q[12])

# Question 16
solver.add((q[10] == 4) == (q[16] == 1))
solver.add((q[10] == 3) == (q[16] == 2))
solver.add((q[10] == 2) == (q[16] == 3))
solver.add((q[10] == 1) == (q[16] == 4))
solver.add((q[10] == 5) == (q[16] == 5))

# Question 17
solver.add((q[6] == 3) == (q[17] == 1))
solver.add((q[6] == 4) == (q[17] == 2))
solver.add((q[6] == 5) == (q[17] == 3))
solver.add(z3.And(q[6] != 3, q[6] != 4, q[6] != 5) == (q[17] == 4))
solver.add(q[17] != 5)

# Question 18
solver.add((a_answers == b_answers) == (q[18] == 1))
solver.add((a_answers == c_answers) == (q[18] == 2))
solver.add((a_answers == d_answers) == (q[18] == 3))
solver.add((a_answers == e_answers) == (q[18] == 4))
solver.add(z3.And(
  a_answers != b_answers,
  a_answers != c_answers,
  a_answers != d_answers,
  a_answers != e_answers
) == (q[18] == 5))

# Question 19
solver.add(q[19] == q[19])

# Question 20
solver.add(q[20] == 5)

# Print solutions

if solver.check() == z3.sat:
  model = solver.model()
  for i in range(1,21):
    a = int(str(model.evaluate(q[i])))
    print("Q%2d: %s" % (i, " ABCDE"[a]))
else:
  print("failed to solve")






"""
http://faculty.uml.edu/jpropp/srat-Q.txt

SELF-REFERENTIAL APTITUDE TEST, by Jim Propp (jimpropp at gmaildotcom)

The solution to the following puzzle is unique; in some cases the
knowledge that the solution is unique may actually give you a short-cut
to finding the answer to a particular question.  (Thanks to Andy Latto
for bringing this subtlety to my attention.)

I should mention that if you don't agree with me about the answer to #20,
you will get a different solution to the puzzle than the one I had in mind.
But I should also mention that if you don't agree with me about the answer
to #20, you are just plain wrong.  :-)

You may now begin work.


 1. The first question whose answer is B is question
    (A) 1
    (B) 2
    (C) 3
    (D) 4
    (E) 5

 2. The only two consecutive questions with identical answers are questions
    (A) 6 and 7
    (B) 7 and 8
    (C) 8 and 9
    (D) 9 and 10
    (E) 10 and 11

 3. The number of questions with the answer E is
    (A) 0
    (B) 1
    (C) 2
    (D) 3
    (E) 4

 4. The number of questions with the answer A is
    (A) 4
    (B) 5
    (C) 6
    (D) 7
    (E) 8

 5. The answer to this question is the same as the answer to question
    (A) 1
    (B) 2
    (C) 3
    (D) 4
    (E) 5

 6. The answer to question 17 is
    (A) C
    (B) D
    (C) E
    (D) none of the above
    (E) all of the above

 7. Alphabetically, the answer to this question and the answer to the
    following question are
    (A) 4 apart
    (B) 3 apart
    (C) 2 apart
    (D) 1 apart
    (E) the same

 8. The number of questions whose answers are vowels is
    (A) 4
    (B) 5
    (C) 6
    (D) 7
    (E) 8

 9. The next question with the same answer as this one is question
    (A) 10
    (B) 11
    (C) 12
    (D) 13
    (E) 14

10. The answer to question 16 is
    (A) D
    (B) A
    (C) E
    (D) B
    (E) C

11. The number of questions preceding this one with the answer B is
    (A) 0
    (B) 1
    (C) 2
    (D) 3
    (E) 4

12. The number of questions whose answer is a consonant is
    (A) an even number
    (B) an odd number
    (C) a perfect square
    (D) a prime
    (E) divisible by 5

13. The only odd-numbered problem with answer A is
    (A) 9
    (B) 11
    (C) 13
    (D) 15
    (E) 17

14. The number of questions with answer D is
    (A) 6
    (B) 7
    (C) 8
    (D) 9
    (E) 10

15. The answer to question 12 is
    (A) A
    (B) B
    (C) C
    (D) D
    (E) E

16. The answer to question 10 is
    (A) D
    (B) C
    (C) B
    (D) A
    (E) E

17. The answer to question 6 is
    (A) C
    (B) D
    (C) E
    (D) none of the above
    (E) all of the above

18. The number of questions with answer A equals the number of questions
    with answer
    (A) B
    (B) C
    (C) D
    (D) E
    (E) none of the above

19. The answer to this question is:
    (A) A
    (B) B
    (C) C
    (D) D
    (E) E

20. Standardized test is to intelligence as barometer is to
    (A) temperature (only)
    (B) wind-velocity (only)
    (C) latitude (only)
    (D) longitude (only)
    (E) temperature, wind-velocity, latitude, and longitude

( to go to the main SRAT page, go to jamespropp.org/srat.html )
"""
