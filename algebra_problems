#!/usr/bin/env python

from __future__ import print_function
import z3

def print_solutions(problem, solver):
  print("Solution to problem %s:" % problem)
  if solver.check() == z3.sat:
    model = solver.model()
    for v in model:
      print("* %s = %s" % (v, model[v]))
  else:
    print("* Can't solve the problem")

def problem_01():
  solver = z3.Solver()
  x = z3.Real("x")
  solver.add(5*(-3*x - 2) - (x - 3) == -4*(4*x + 5) + 13)
  print_solutions("01", solver)
  # No nice way to say x is unconstrained

def declare_abs(solver, var, expr):
  solver.add(z3.Or(
    z3.And(var == expr,  expr >= 0),
    z3.And(var == -expr, expr <= 0)
  ))

def problem_03():
  solver = z3.Solver()
  x = z3.Real("x")
  xm2abs = z3.Real("|x-2|")
  declare_abs(solver, xm2abs, x-2)
  m6abs = z3.Real("|-6|")
  declare_abs(solver, m6abs, -6)
  solver.add(x < 2)
  solver.add(xm2abs == 4*m6abs)
  print_solutions("03", solver)

def declare_distance(solver, a_b, ax, ay, bx, by):
  solver.add(a_b >= 0)
  solver.add(a_b**2 == (ax-bx)**2 + (ay-by)**2)

def problem_04():
  solver = z3.Solver()
  ax = z3.Real("ax")
  ay = z3.Real("ay")
  bx = z3.Real("bx")
  by = z3.Real("by")
  a_b = z3.Real("|a-b|")
  declare_distance(solver, a_b, ax, ay, bx, by)
  solver.add(ax == -4)
  solver.add(ay == -5)
  solver.add(bx == -1)
  solver.add(by == -1)
  print_solutions("04", solver)

problem_01()
problem_03()
problem_04()

"""
http://www.analyzemath.com/Algebra1/Algebra1.html


Problem 1: Solve the equation
  5(-3x - 2) - (x - 3) = -4(4x + 5) + 13

Problem 3: If x <2, simplify
  |x - 2| = 4|-6|
(actually I misread original, whatever)

Problem 4: Find the distance between the points (-4 , -5) and (-1 , -1).


"""
